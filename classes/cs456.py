from collections import deque

def breadth_first_search(adjacency_list, start, goal):
    # تعريف قائمة الانتظار التي سيتم استخدامها لتتبع المسار والزيارات
    queue = deque([[start]])
    visited = set()
    
    print("Initial awaiting list:", list(queue))
    
    while queue:
        # سحب العقدة من بداية القائمة
        path = queue.popleft()
        node = path[-1]
        
        # طباعة قائمة الانتظار الحالية
        print("Awaiting:", list(queue))
        
        # إذا وصلنا إلى الهدف، نطبع المسار وننهي
        if node == goal:
            print("Solution path:", path)
            return path
        
        # إذا لم يكن العقدة الحالية قد زارت بعد
        if node not in visited:
            visited.add(node)
            
            # إضافة الجيران إلى قائمة الانتظار
            for neighbor in adjacency_list.get(node, []):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)
    
    print("No path found to the goal.")
    return None

# قائمة التجاور
adjacency_list = {
    1: [2], 2: [1, 3, 10], 3: [2, 11], 4: [12, 5], 5: [4], 6: [15], 7: [31], 8: [9],
    9: [8, 10, 17], 10: [2, 9, 18], 11: [3, 12], 12: [4, 11], 13: [14], 14: [13, 21],
    15: [6, 14, 23], 16: [17, 24], 17: [9, 16, 33], 18: [10, 19], 19: [18], 20: [21, 28],
    21: [14, 22], 22: [21, 38], 23: [15], 24: [16, 25, 41], 25: [24], 26: [34], 27: [28, 43],
    28: [20, 27], 29: [37], 30: [31, 39], 31: [7, 30], 32: [33, 49], 33: [17, 34, 32], 
    34: [26, 33], 35: [44], 36: [37, 59], 37: [29, 36, 45], 38: [22, 37, 39], 39: [30, 47], 
    40: [55], 41: [24], 42: [43, 56], 43: [27, 42, 44], 44: [35, 43, 52], 45: [37, 46], 
    46: [45, 54], 47: [39], 48: [49, 78], 49: [32, 63], 50: [51], 51: [50, 72], 52: [44], 
    53: [60], 54: [46, 55], 55: [40, 54], 56: [42, 57], 57: [56, 64], 58: [59, 73], 
    59: [36, 58, 60], 60: [53, 59], 61: [62, 67], 62: [61, 69], 63: [49, 64, 79], 
    64: [57, 63], 65: [74], 66: [67, 74], 67: [61, 66], 68: [69], 69: [62, 68], 
    70: [71, 80], 71: [70], 72: [51, 73], 73: [58, 82], 74: [65, 75], 75: [66, 76, 83], 
    76: [77, 84], 77: [76], 78: [48], 79: [63, 80], 80: [70, 79], 81: [82], 
    82: [73, 81, 83], 83: [75, 82], 84: [76, 85], 85: [84]
}

# نقطة البداية والهدف
start = 8
goal = 777

# استدعاء الدالة
breadth_first_search(adjacency_list, start, goal)
